{"ast":null,"code":"var _jsxFileName = \"/Users/parasvohra/Desktop/React Project/Ryyd/ryyd/src/components/auth/resetPassword.jsx\";\nimport React from \"react\";\nimport Form from \"../../common/form\";\nimport Joi from \"joi-browser\";\nimport jwtDecode from \"jwt-decode\";\nimport auth from \"../../services/authService\";\n\nclass ResetPassword extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        password: \"\",\n        confirmPassword: \"\"\n      },\n      errors: {}\n    };\n    this.schema = {\n      password: Joi.string().min(5).max(255).required().label(\"Password\"),\n      confirmPassword: Joi.string().min(5).max(255).required().label(\"Password\")\n    };\n  }\n\n  async doSubmit() {\n    const pass = this.state.data;\n\n    if (pass.password !== pass.confirmPassword) {\n      const errors = { ...this.state.errors\n      };\n      errors.message = \"Password doesn't match\";\n      return this.setState(errors);\n    }\n\n    const resetLink = this.props.match.params.token;\n    const newPassword = { ...this.state.data\n    };\n    newPassword.resetLink = resetLink;\n    this.setState({\n      newPassword\n    });\n\n    try {\n      const response = await auth.resetPassword(newPassword);\n      console.log(response);\n      auth.loginWithJwt(response.headers[\"x-auth-token\"]);\n      window.location = \"/dashboard\";\n    } catch (ex) {\n      const errors = { ...this.state.errors\n      };\n      errors.password = ex.response;\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  render() {\n    let user = jwtDecode(this.props.match.params.token);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, \"Setup New Password\"), this.renderInput(\"password\", \"New Password\"), this.renderInput(\"confirmPassword\", \"Confirm Password\"), this.renderButton(\"Reset Password\"))));\n  }\n\n}\n\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/parasvohra/Desktop/React Project/Ryyd/ryyd/src/components/auth/resetPassword.jsx"],"names":["React","Form","Joi","jwtDecode","auth","ResetPassword","state","data","password","confirmPassword","errors","schema","string","min","max","required","label","doSubmit","pass","message","setState","resetLink","props","match","params","token","newPassword","response","resetPassword","console","log","loginWithJwt","headers","window","location","ex","render","user","handleSubmit","renderInput","renderButton"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Form from \"../../common/form\";\nimport Joi from \"joi-browser\";\nimport jwtDecode from \"jwt-decode\";\nimport auth from \"../../services/authService\";\n\nclass ResetPassword extends Form {\n  state = {\n    data: { password: \"\", confirmPassword: \"\" },\n    errors: {},\n  };\n  schema = {\n    password: Joi.string().min(5).max(255).required().label(\"Password\"),\n    confirmPassword: Joi.string().min(5).max(255).required().label(\"Password\"),\n  };\n\n  async doSubmit() {\n    const pass = this.state.data;\n    if (pass.password !== pass.confirmPassword) {\n      const errors = { ...this.state.errors };\n      errors.message = \"Password doesn't match\";\n\n      return this.setState(errors);\n    }\n\n    const resetLink = this.props.match.params.token;\n    const newPassword = { ...this.state.data };\n    newPassword.resetLink = resetLink;\n    this.setState({ newPassword });\n\n    try {\n      const response = await auth.resetPassword(newPassword);\n      console.log(response);\n      auth.loginWithJwt(response.headers[\"x-auth-token\"]);\n      window.location = \"/dashboard\";\n    } catch (ex) {\n      const errors = { ...this.state.errors };\n      errors.password = ex.response;\n      this.setState({ errors });\n    }\n  }\n\n  render() {\n    let user = jwtDecode(this.props.match.params.token);\n    return (\n      <div className=\"row\">\n        <div>\n          <form onSubmit={this.handleSubmit}>\n            <legend>Setup New Password</legend>\n            {this.renderInput(\"password\", \"New Password\")}\n            {this.renderInput(\"confirmPassword\", \"Confirm Password\")}\n            {this.renderButton(\"Reset Password\")}\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}