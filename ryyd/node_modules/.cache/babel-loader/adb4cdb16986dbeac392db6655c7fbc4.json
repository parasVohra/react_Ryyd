{"ast":null,"code":"var _jsxFileName = \"/Users/parasvohra/Desktop/React Project/Ryyd/ryyd/src/components/searchRide.jsx\";\nimport React from \"react\";\nimport Form from \"../common/form\";\nimport rideService from \"../services/rideService\";\nimport Joi from \"@hapi/joi\";\nimport ShowRides from \"./showRides\";\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport { searchedRide } from \"../store/rides\";\n\nclass SearchRide extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        from: \"London\",\n        to: \"Toronto\",\n        date: \"\"\n      },\n      searchData: JSON.parse(localStorage.getItem(\"searchedRides\")) || \"\",\n      errors: {}\n    };\n    this.date = moment().format(\"L\");\n    this.schema = {\n      from: Joi.string().min(3).max(255).required().label(\"From\"),\n      to: Joi.string().min(3).max(255).required().label(\"To\"),\n      date: Joi.date().required().label(\"Date\")\n    };\n  }\n\n  componentDidMount() {\n    console.log(moment().format(\"ll\"));\n  }\n\n  async doSubmit() {\n    const searchData = this.state.data;\n\n    try {\n      const response = await rideService.searchRides(searchData);\n      this.props.requestedRide();\n      this.props.searchedRide(response.data); //Save searched data to local storage\n\n      localStorage.setItem(\"searchedRides\", JSON.stringify(response.data));\n    } catch (ex) {\n      const errors = { ...this.state.errors\n      };\n      errors.from = ex.response;\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  render() {\n    const rideList = this.props.ride.searchedRide;\n    let message;\n\n    if (rideList) {\n      if (rideList.length === 0) {\n        message = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }\n        }, \"There is no ride available at this point\"), /*#__PURE__*/React.createElement(Link, {\n          to: \"/requestRide\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          to: \"/offerRide\",\n          className: \"btn btn-primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }\n        }, \"Drop Request\")));\n      } else {\n        message = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }\n        }, rideList.map((ride, index) => /*#__PURE__*/React.createElement(Link, {\n          to: {\n            pathname: \"/showRideInfo\",\n            state: {\n              index: index\n            }\n          },\n          style: {\n            textDecoration: \"none\",\n            color: \"black\"\n          },\n          key: ride._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(ShowRides, {\n          params: index,\n          key: ride._id,\n          ride: ride,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }\n        }))));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, this.renderInput(\"from\", \"From\"), this.renderInput(\"to\", \"To\"), this.renderInput(\"date\", \"Date\", \"date\", \"\"), this.renderButton(\"Search\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, message));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  ride: state.ride\n});\n\nconst mapDispatchToProps = dispatch => ({\n  searchedRide: ride => dispatch({\n    type: \"searchedRide\",\n    payload: {\n      message: ride\n    }\n  }),\n  requestedRide: () => dispatch({\n    type: \"requestedRide\"\n  }),\n  selectedRides: index => dispatch({\n    type: \"selectedRide\",\n    payload: index\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchRide);","map":{"version":3,"sources":["/Users/parasvohra/Desktop/React Project/Ryyd/ryyd/src/components/searchRide.jsx"],"names":["React","Form","rideService","Joi","ShowRides","Link","moment","connect","searchedRide","SearchRide","state","data","from","to","date","searchData","JSON","parse","localStorage","getItem","errors","format","schema","string","min","max","required","label","componentDidMount","console","log","doSubmit","response","searchRides","props","requestedRide","setItem","stringify","ex","setState","render","rideList","ride","message","length","map","index","pathname","textDecoration","color","_id","handleSubmit","renderInput","renderButton","mapStateToProps","mapDispatchToProps","dispatch","type","payload","selectedRides"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Form from \"../common/form\";\nimport rideService from \"../services/rideService\";\nimport Joi from \"@hapi/joi\";\nimport ShowRides from \"./showRides\";\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport { searchedRide } from \"../store/rides\";\n\nclass SearchRide extends Form {\n  state = {\n    data: {\n      from: \"London\",\n      to: \"Toronto\",\n      date: \"\",\n    },\n    searchData: JSON.parse(localStorage.getItem(\"searchedRides\")) || \"\",\n    errors: {},\n  };\n\n  date = moment().format(\"L\");\n\n  componentDidMount() {\n    console.log(moment().format(\"ll\"));\n  }\n\n  schema = {\n    from: Joi.string().min(3).max(255).required().label(\"From\"),\n    to: Joi.string().min(3).max(255).required().label(\"To\"),\n    date: Joi.date().required().label(\"Date\"),\n  };\n\n  async doSubmit() {\n    const searchData = this.state.data;\n    try {\n      const response = await rideService.searchRides(searchData);\n      this.props.requestedRide();\n      this.props.searchedRide(response.data);\n      //Save searched data to local storage\n      localStorage.setItem(\"searchedRides\", JSON.stringify(response.data));\n    } catch (ex) {\n      const errors = { ...this.state.errors };\n      errors.from = ex.response;\n      this.setState({ errors });\n    }\n  }\n\n  render() {\n    const rideList = this.props.ride.searchedRide;\n    let message;\n    if (rideList) {\n      if (rideList.length === 0) {\n        message = (\n          <div>\n            <p>There is no ride available at this point</p>\n            <Link to=\"/requestRide\">\n              <button to=\"/offerRide\" className=\"btn btn-primary\">\n                Drop Request\n              </button>\n            </Link>\n          </div>\n        );\n      } else {\n        message = (\n          <div>\n            {rideList.map((ride, index) => (\n              <Link\n                to={{\n                  pathname: \"/showRideInfo\",\n                  state: { index: index },\n                }}\n                style={{\n                  textDecoration: \"none\",\n                  color: \"black\",\n                }}\n                key={ride._id}\n              >\n                <ShowRides params={index} key={ride._id} ride={ride} />\n              </Link>\n            ))}\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          {this.renderInput(\"from\", \"From\")}\n          {this.renderInput(\"to\", \"To\")}\n          {this.renderInput(\"date\", \"Date\", \"date\", \"\")}\n          {this.renderButton(\"Search\")}\n        </form>\n        <div>{message}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  ride: state.ride,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  searchedRide: ride =>\n    dispatch({\n      type: \"searchedRide\",\n      payload: { message: ride },\n    }),\n  requestedRide: () => dispatch({ type: \"requestedRide\" }),\n  selectedRides: index =>\n    dispatch({\n      type: \"selectedRide\",\n      payload: index,\n    }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchRide);\n"]},"metadata":{},"sourceType":"module"}